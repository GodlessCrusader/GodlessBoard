@using GodlessBoard.Data
@using GodlessBoard.Models
@using GodlessBoard.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Headers
@inject MediaUploadRouter _mediaUploadRouter
@inject MyDbContext _context
@inject IHttpContextAccessor HttpContextAcessor
@inject IWebHostEnvironment _env
@inject HttpClient client

<form>
    <img class="@ImageClass" src="@(imgUrl)" height="100" width="100">
    <InputFile OnChange="UploadImageAsync" />
    
    <button class="@ButtonClass" disabled="@ImageSlotEmpty" @onclick="ChangeUserAvatarAsync">Change profile picture</button>
    <span class="text-dngr">@SpanText</span>
</form>

@code {
    [Parameter]
    public User? CurrentUser { get; set; }
    [Parameter]
    public string imgUrl { get; set; }
    public string ButtonClass { get; set; } = "btn-primary rounded disabled";
    public string SpanText { get; set; } = string.Empty;
    public string ImageClass { get; set; } = "";
    public bool ImageSlotEmpty { get; set; } = true;
    Media Avatar;
    IBrowserFile Image;

    private async Task ChangeUserAvatarAsync()
    {
        if (Avatar != null && Image != null)
        {

            //await DownloadImageAsync();

            _context.Users.Where(x => x.Id == CurrentUser.Id).Single().ProfilePicUrl = $"{Avatar.Name}";

            _context.SaveChanges();

        }
        else
        {
            SpanText = "Please select target image";
        }


    }

    private async Task DownloadImageAsync()
    {
        imgUrl = "../image/fadingLines.gif";
        byte[] bytes;
        using (var ms = new MemoryStream())
        {
            var istream = Image.OpenReadStream();
            await istream.CopyToAsync(ms);
            bytes = ms.ToArray();
            istream.Close();
            istream.Dispose();
        }
        var imageExists = false;
        if (_mediaUploadRouter.CheckExistance(bytes, CurrentUser.UserName, Image.Name))
        {
            SpanText = "This image already exists in your library";
            imageExists = true;
        }

        Avatar = await _mediaUploadRouter.UploadMediaAsync(bytes, CurrentUser.UserName, Image.Name);
        ButtonClass = ButtonClass.Replace("disable", string.Empty);
        imgUrl = Avatar.Name;
        ImageSlotEmpty = false;
        
        if(!imageExists)
        {
            Avatar.Weight = Image.Size;
            Avatar.OwnerId = CurrentUser.Id;
            _context.Users.Where(x => x.Id == CurrentUser.Id).Single().CurrentMediaWeight += (ulong)Image.Size;
            _context.Media.Add(Avatar);
            _context.SaveChanges();
        }
        

        
        


        
    }

    private async Task UploadImageAsync(InputFileChangeEventArgs e)
    {
        if(!e.File.ContentType.Contains("image") || CurrentUser == null)
        {
            SpanText = "Wrong file type";
            return;
        }else if( CurrentUser == null)
        {
            SpanText = "Authorization error. Please log in or sign up a new account";
            return;
        }else if(CurrentUser.MaxMediaWeight - CurrentUser.CurrentMediaWeight < (ulong)e.File.Size)
        {
            SpanText = "Media storage size limitation reached";
            return;
        }else
        {
            Image = e.File;
            await DownloadImageAsync();
            imgUrl = Avatar.Name;
        }
        
    }

}