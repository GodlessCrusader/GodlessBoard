@using GodlessBoard.Data
@using GodlessBoard.Models
@using GodlessBoard.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject MyDbContext _dbContext

@inject IHttpContextAccessor _httpContextAccessor
<div style="position: absolute; bottom:0;">
<div id="MessageHistoryContainer" >
    @{  
        foreach (var m in Chat)
        {
                    <label><b>@m.User.DisplayName</b></label>
                    <br>
                    <img height="25" width="25" src="@m.User.ProfilePicUrl">
                    <label style="font-size:12px;">@m.Text</label>
                    <br>
                    <label style="font-size:10px">@m.RecievingTime.ToString()</label>
                    <br>
        }
    }
</div>

    <EditForm Model="SentMessageText" >
    <InputText @bind-Value="SentMessageText"/>
    <button @onclick = "SendMessageAsync" class="btn btn-outline-primary">Send</button>
    </EditForm>
</div>



@code {

    [Parameter]
    public int GameId { get; set; }
    public List<ChatMessage> Chat { get; set; }
    public List<User> ChatMembers { get; set; }
    public string SentMessageText { get; set; } = string.Empty;
    protected override void OnInitialized()
    {

        Chat = (from messages in _dbContext.Messages
                where messages.Game.Id == GameId
                select messages).ToList();
        var userIds = new List<int>();
        foreach(var m in Chat)
        {
            if(!userIds.Exists(x => x == m.UserId))
            {
                userIds.Add(m.UserId);
            }
        }
        ChatMembers = (from users in _dbContext.Users
                       where userIds.Contains(users.Id)
                       select users).ToList();
        // ChatMembers = _dbContext.Users.Where(x => ).ToList();
        if(Chat == null)
        {
            Chat = new List
    <ChatMessage>() {
                new ChatMessage() { User = _dbContext.Users.Where(x => x.UserName == Auth.GetUserName(_httpContextAccessor.HttpContext.User.Identity.Name)).Single(),
                Text = "The very first message"
                } 
            };
        }
    }
    public async Task SendMessageAsync()
    {
        if (!string.IsNullOrEmpty(SentMessageText))
        {
            var currentUser = _dbContext.Users.Where(x => x.UserName == Auth.GetUserName(_httpContextAccessor.HttpContext.User.Identity.Name)).Single();
            var sentMessage = new ChatMessage() { Text = SentMessageText, Game=_dbContext.Games.SingleOrDefault(x => x.Id == GameId), User = currentUser, RecievingTime = DateTime.Now};
            Chat.Add(sentMessage);
            await _dbContext.Messages.AddAsync(sentMessage);
            await _dbContext.SaveChangesAsync();
            SentMessageText = string.Empty;
        }
        
    }
}
