@using GodlessBoard.Data
@using GodlessBoard.Models
@using GodlessBoard.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@inject MyDbContext _dbContext
@inject IHttpContextAccessor _httpContextAccessor


<div class="tab" style="" >
    <div id="tablinksContainer" style="width:100%; height:10%;">
        <button class="tablinks" @onclick="() => ShowElement(ref _chatDisplay)">Chat</button>
        <button class="tablinks" @onclick="() => ShowElement(ref _sheetsDisplay)">Sheets</button>
        <button class="tablinks" @onclick="() => ShowElement(ref _audioDisplay)">Audio</button>
        <button class="tablinks" @onclick="() => ShowElement(ref _imagesDisplay)">Images</button>
        <button class="tablinks" @onclick="() => ShowElement(ref _settingsDisplay)">Settings</button>
    </div>
    
    <div id="ChatContainer" class="tabcontent" style="display:@_chatDisplay">
        <div id="MessageHistoryContainer" style="z-index:1;">
            @{  
                foreach (var m in Chat)
                {
                    <label><b>@m.User.DisplayName</b></label>
                    <br>
                    <img height="25" width="25" src="@m.User.ProfilePicUrl">
                    <label style="font-size:12px;">@m.Text</label>
                    <br>
                    <label style="font-size:10px">@m.RecievingTime.ToString()</label>
                    <br>
                }
            }
        </div>
        
    </div>
    <div class="tabcontent" id="sheetsContainer" style="display:@_sheetsDisplay">sheetscontainer</div>
    <div class="tabcontent" id="audioContainer" style="display:@_audioDisplay">audiocontainer</div>
    <div class="tabcontent" id="imagesContainer" style="display:@_imagesDisplay">
        <ul>
        @{            
            foreach(var m in User.Medias)
            {
                if (m.Type == MediaType.Image)
                {
                    <li><img style="height:20px; width:20px;" src="@m.Name"/>
                    <button @onclick="() => AddBoardImage(m)" class="btn btn-secondary">Add to the board</button>
                    </li>
                }
            }          
        }
        </ul>
    </div>
    <div class="tabcontent" id="settingsContainer" style="display:@_settingsDisplay">settingscontainer</div>
    <div id="chatinputcontainer">
        <EditForm Model="SentMessageText">
            <InputText @bind-Value="SentMessageText"/>
            <button @onclick = "SendMessageAsync" class="btn btn-outline-primary">Send</button>
        </EditForm>
    </div>
    
</div>



    




@code {
    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public int GameId { get; set; }
    public List<ChatMessage> Chat { get; set; }
    public List<User> ChatMembers { get; set; }
    public string SentMessageText { get; set; } = string.Empty;
    public User User { get; set; }
    public Game Game { get; set; }
    public GameModel.Game Instance { get; set; }
    private string _chatDisplay = "block";
    private string _sheetsDisplay = "none";
    private string _audioDisplay =  "none";
    private string _imagesDisplay =  "none";
    private string _settingsDisplay =  "none";

    public void AddBoardImage(Media m)
    {
        Instance.BoardImages.Add(new GameModel.BoardImage(200,200, m.Name, false));
        Game.JsonRepresentation = Newtonsoft.Json.JsonConvert.SerializeObject(Instance);
        _dbContext.SaveChanges();
    }
    public void ShowElement(ref string num)
    {
        _chatDisplay = "none";
        _sheetsDisplay = "none";
        _audioDisplay = "none";
        _imagesDisplay = "none";
        _settingsDisplay = "none";

        num = "block";
    }


    protected override void OnInitialized()
    {
        User = _dbContext.Users.Where(x => x.Id == UserId).Single();
        User.Medias = _dbContext.Media.Where(x => x.OwnerId == UserId).ToList();
        Chat = (from messages in _dbContext.Messages
                where messages.Game.Id == GameId
                select messages).ToList();
        var userIds = new List<int>();
        foreach(var m in Chat)
        {
            if(!userIds.Exists(x => x == m.UserId))
            {
                userIds.Add(m.UserId);
            }
        }
        ChatMembers = (from users in _dbContext.Users
                       where userIds.Contains(users.Id)
                       select users).ToList();
        Game = (from game in _dbContext.Games
                where game.Id == GameId
                select game).Single();
        Instance = Newtonsoft.Json.JsonConvert.DeserializeObject<GameModel.Game>(Game.JsonRepresentation);
        // ChatMembers = _dbContext.Users.Where(x => ).ToList();
        if(Chat == null)
        {
            Chat = new List<ChatMessage>() {
                new ChatMessage() { User = _dbContext.Users.Where(x => x.UserName == Auth.GetUserName(_httpContextAccessor.HttpContext.User.Identity.Name)).Single(),
                Text = "The very first message"
                } 
            };
        }
    }
    public async Task SendMessageAsync()
    {
        if (!string.IsNullOrEmpty(SentMessageText))
        {
            var currentUser = _dbContext.Users.Where(x => x.UserName == Auth.GetUserName(_httpContextAccessor.HttpContext.User.Identity.Name)).Single();
            var sentMessage = new ChatMessage() { Text = SentMessageText, Game=_dbContext.Games.SingleOrDefault(x => x.Id == GameId), User = currentUser, RecievingTime = DateTime.Now};
            Chat.Add(sentMessage);
            await _dbContext.Messages.AddAsync(sentMessage);
            await _dbContext.SaveChangesAsync();
            SentMessageText = string.Empty;
        }
        
    }
}
