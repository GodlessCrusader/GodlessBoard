@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@using GodlessBoard.GameModel
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@{//<div id="BoardPreferencesToolbarContainer" >
    //<EditForm Model="Board.Grid">
    //<InputNumber @bind-Value="Board.Grid.Size">Grid resolution: </InputNumber>
    //<InputNumber @bind-Value="Board.Grid.LineWidth">Grid line width: </InputNumber>
    //</EditForm>
//</div>
}
<div ><BECanvas @ref="_canvas" Height="@height" Width="@width" ></BECanvas></div>
<input type="range" min="1" step="1" max="200"  @bind="ZoomGrade" />
<label> Scale: @ZoomGrade %</label>
<div id="zoomslider" class="ui-slider ui-slider-vertical ui-widget ui-widget-content ui-corner-all"><a class="ui-slider-handle ui-state-default ui-corner-all" href="#" style="bottom: 14.5833%;"></a></div>
<label>Counter :@c</label>
<button class="btn btn-primary" @onclick = "OnClick">onclick</button>
<button class="btn btn-secondary"  @onclick = "CanvasRenderAsync">Canvas render</button>
@code {
    private float _zoomGrade = 1;
    public float ZoomGrade 
    {
        get
        {
            return _zoomGrade;
        }
        set
        {
            _zoomGrade = value;
            CanvasRenderAsync();
        } 
    }
    public int height { get; set; }
    public int width { get; set; }
    public int c { get; set; } = 0;
    private BECanvasComponent _canvas;
    private Canvas2DContext _canvasContext;
    public Board Board { get; set; }
    [Parameter]
    public Models.Game Game { get; set; }
    public void OnClick()
    {
        c++;
    }
    public async Task ZoomSliderChangeAsync()
    {
        await CanvasRenderAsync();
    }
    public async void ZoomInAsync()
    {
        ZoomGrade++;
    }
    public async void ZoomOutAsync()
    {
        ZoomGrade--;
    }
    public async Task CanvasRenderAsync()
    {
        var game = Newtonsoft.Json.JsonConvert.DeserializeObject<GameModel.Game>(Game.JsonRepresentation);
        Board = game.Tabs[0];
        height = Board.Height;
        width = Board.Width;
        _canvasContext = await _canvas.CreateCanvas2DAsync();
        await GridRenderAsync();
        //await _canvasContext.FillRectAsync(0,0,20,20);
        //await _canvasContext.StrokeTextAsync("sosi jepu", 10, 100);
    }
    public async Task GridRenderAsync()
    {
        var blackspaceSize = (Board.Grid.Size+Board.Grid.LineWidth)*ZoomGrade/100;
        await _canvasContext.SetFillStyleAsync("black");
        await _canvasContext.FillRectAsync(0,0,Board.Width+100,Board.Height+100);
        await _canvasContext.SetFillStyleAsync("white");
        var c = _canvas.Height;
        var b = Board.Height;
        await _canvasContext.FillRectAsync(blackspaceSize,blackspaceSize,Board.Width-blackspaceSize*2, Board.Height-blackspaceSize*2);
        await _canvasContext.SetFillStyleAsync("gray");
        for(float i=blackspaceSize;i<=Board.Height-blackspaceSize*2;i+=blackspaceSize)
        {
            await _canvasContext.FillRectAsync(i, blackspaceSize, Board.Grid.LineWidth, Board.Height-blackspaceSize*2);    
        }
        for(float i=blackspaceSize;i<=Board.Height-blackspaceSize*2;i+=blackspaceSize)
        {
            await _canvasContext.FillRectAsync(blackspaceSize, i, Board.Height-blackspaceSize*2, Board.Grid.LineWidth);    
        }
    }
}

