@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@using GodlessBoard.Data
@using GodlessBoard.GameModel
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject MyDbContext _dbContext
@inject IJSRuntime _jsRuntime

@{//<div id="BoardPreferencesToolbarContainer" >
    //<EditForm Model="Board.Grid">
    //<InputNumber @bind-Value="Board.Grid.Size">Grid resolution: </InputNumber>
    //<InputNumber @bind-Value="Board.Grid.LineWidth">Grid line width: </InputNumber>
    //</EditForm>
//</div>
}
<img @ref="@ImageBuffer" src="@ImageBufferUrl" hidden/>
<div ><BECanvas @ref="_canvas" Height="@height" Width="@width" ></BECanvas></div>

<div style="top:20px; right:22%; position:absolute;">@ZoomGrade %</div>
<div id="zoomsliderContainer">

<input id="zoomslider" type="range" min="20" step="1" max="200"  @bind="ZoomGrade" @bind:event="oninput"/>
</div>




<label>Counter :@c</label>
<button class="btn btn-primary" @onclick = "OnClick">onclick</button>
<button class="btn btn-secondary"  @onclick = "CanvasRenderAsync">Canvas render</button>
@code {
    private int _zoomGrade = 20;
    public int ZoomGrade 
    {
        get
        {
            return _zoomGrade;
        }
        set
        {
            _zoomGrade = value;
            CanvasRenderAsync();
        } 
    }
    public ElementReference ImageBuffer { get; set; }
    public string ImageBufferUrl { get; set; } = string.Empty;
    public int lineWidth { get; set; }
    public int height { get; set; }
    public int width { get; set; }
    public int c { get; set; } = 0;
    private BECanvasComponent _canvas;
    private Canvas2DContext _canvasContext;
    public Board Board { get; set; }
    [Parameter]
    public int GameId { get; set; }
    public Models.Game Game { get; set; }

    protected override void OnInitialized()
    {
        Game = _dbContext.Games.Where(x => x.Id == GameId).Single();
    }

    public void OnClick()
    {
        c++;
    }

    public async Task CanvasRenderAsync()
    {
        var game = Newtonsoft.Json.JsonConvert.DeserializeObject<GameModel.Game>(Game.JsonRepresentation);
        Board = game.Tabs[0];
        lineWidth = Board.Grid.LineWidth;
        height = (100 + Board.Height)*ZoomGrade/100;
        width = (100 + Board.Width)*ZoomGrade/100;
        _canvasContext = await _canvas.CreateCanvas2DAsync();
        await GridRenderAsync();
        await TokensRenderAsync(game);

    }
    public async Task GridRenderAsync()
    {
        var blackspaceSize = height/(Board.Grid.Size+1);
        await _canvasContext.SetFillStyleAsync("black");
        await _canvasContext.FillRectAsync(0,0,width,height);
        await _canvasContext.SetFillStyleAsync("white");
        await _canvasContext.FillRectAsync(blackspaceSize,blackspaceSize,width-blackspaceSize*2, height-blackspaceSize*2);
        await _canvasContext.SetFillStyleAsync("black");
        await _canvasContext.BeginPathAsync();
        for(float i=blackspaceSize;i<height-blackspaceSize;i+=blackspaceSize)
        {
            //await _canvasContext.FillRectAsync(i, blackspaceSize, lineWidth, height-blackspaceSize*2);
            await _canvasContext.MoveToAsync(i, blackspaceSize);
            await _canvasContext.LineToAsync(i, height - blackspaceSize);
        }
        for(float i=blackspaceSize;i<height-blackspaceSize;i+=blackspaceSize)
        {
            //await _canvasContext.FillRectAsync(blackspaceSize, i, height-blackspaceSize*2, lineWidth);    
            await _canvasContext.MoveToAsync(blackspaceSize, i);
            await _canvasContext.LineToAsync(_canvas.Height - blackspaceSize , i);
        }
        await _canvasContext.StrokeAsync();
        
    }

    public async Task TokensRenderAsync(Game game)
    {
        foreach(var t in game.Tokens)
        {
            
            ImageBufferUrl = t.ImageUrl;
            await _canvasContext.DrawImageAsync(ImageBuffer,t.X - 0.5*t.Width,t.Y - 0.5*t.Height,t.Width*ZoomGrade, t.Height*ZoomGrade);
            
        }

        foreach(var t in game.BoardImages)
        {
            ImageBufferUrl = t.ImageUrl;
            await _canvasContext.DrawImageAsync(ImageBuffer,t.X*ZoomGrade/100 - 0.5*t.Width*ZoomGrade/100,t.Y*ZoomGrade/100 - 0.5*t.Height*ZoomGrade/100);

        }
    }
    public async Task UpdateGameAsync()
    {
        
    }
}

